#cam.py
import cv2
import mediapipe as mp
import time
import os
from my_request import send_image
from trigger_functions import read_triggers_json

mpFaceDetection = mp.solutions.face_detection
faceDetection = mpFaceDetection.FaceDetection(0.20)
mpDraw = mp.solutions.drawing_utils

def init_cam(): # init_cam fonksiyonu webcam'i başlatır.
    cap= cv2.VideoCapture(0)
    if not cap.isOpened():
        raise IOError("Cannot open webcam")
    return cap

def doomsday(cap): # doomsday fonksiyonu webcam'i kapatır.
    cap.release()
    cv2.destroyAllWindows()

def get_latest_image(yol): # get_latest_image fonksiyonu en son eklenen resmi alır.
    files = os.listdir(yol)
    files.sort(key=lambda x: os.path.getmtime(os.path.join(yol, x)))
    files.reverse()
    latest_file = files[0]
    return latest_file

def get_img(path="captures",delay=1): # get_img fonksiyonu bir kare alır.
    cap=init_cam()
    time.sleep(delay)
    img= cap.read()
    img = cv2.resize(img, None, fx=1, fy=1, interpolation=cv2.INTER_AREA)
    cv2.imwrite(f'{path}/{time.strftime("%Y%m%d-%H%M%S")}.jpg', img)
    doomsday(cap)

def get_images(path="captures",max_images=500,delay=1): # get_images fonksiyonu belirtilen süre kadar kare alır.
    cap=init_cam()
    time.sleep(delay)
    counter=0
    while read_triggers_json("cam"):
        success, img = cap.read()
        results = faceDetection.process(img)
        if results == 0:
            break        

        elif results.detections:
            for id, detection in enumerate(results.detections):
                bboxC = detection.location_data.relative_bounding_box
                h, w, _ = img.shape
                bbox = int(bboxC.xmin*w), int(bboxC.ymin*h), int(bboxC.width*w), int(bboxC.height*h)
                cv2.rectangle(img, bbox, (0,255,255),2)

            img= cv2.resize(img, None, fx=0.5, fy=0.5, interpolation=cv2.INTER_AREA)
            cv2.imwrite(f'{path}/{counter}-{time.strftime("%Y%m%d-%H%M%S")}.jpg', img)
            send_image(get_latest_image(path),path)
        
        # cv2.imshow("img",img)   
        cv2.waitKey(10)            
        time.sleep(delay)
        counter+=1
        if counter== max_images:
            break
        c=cv2.waitKey(1)
        if c==27:
            break       
              
    doomsday(cap)

def delete_images(path="captures"): # delete_images fonksiyonu belirtilen klasördeki tüm resimleri siler.
    for i in os.listdir(path):
        os.remove(f"{path}/{i}")

def cam_main():
    get_images()
